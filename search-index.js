var searchIndex = JSON.parse('{\
"ropey":{"doc":"Ropey is a utf8 text rope for Rust. It is fast, robust,…","i":[[3,"Rope","ropey","A utf8 text rope.",null,null],[3,"RopeBuilder","","An efficient incremental `Rope` builder.",null,null],[3,"RopeSlice","","An immutable view into part of a `Rope`.",null,null],[11,"new","","Creates an empty `Rope`.",0,[[]]],[11,"from_str","","Creates a `Rope` from a string slice.",0,[[]]],[11,"from_reader","","Creates a `Rope` from the output of a reader.",0,[[["read",8]],["result",6]]],[11,"write_to","","Writes the contents of the `Rope` to a writer.",0,[[["write",8]],["result",6]]],[11,"len_bytes","","Total number of bytes in the `Rope`.",0,[[]]],[11,"len_chars","","Total number of chars in the `Rope`.",0,[[]]],[11,"len_lines","","Total number of lines in the `Rope`.",0,[[]]],[11,"len_utf16_cu","","Total number of utf16 code units that would be in `Rope`…",0,[[]]],[11,"capacity","","Total size of the `Rope`\'s text buffer space, in bytes.",0,[[]]],[11,"shrink_to_fit","","Shrinks the `Rope`\'s capacity to the minimum possible.",0,[[]]],[11,"insert","","Inserts `text` at char index `char_idx`.",0,[[]]],[11,"insert_char","","Inserts a single char `ch` at char index `char_idx`.",0,[[]]],[11,"remove","","Removes the text in the given char index range.",0,[[]]],[11,"split_off","","Splits the `Rope` at `char_idx`, returning the right part…",0,[[]]],[11,"append","","Appends a `Rope` to the end of this one, consuming the…",0,[[]]],[11,"byte_to_char","","Returns the char index of the given byte.",0,[[]]],[11,"byte_to_line","","Returns the line index of the given byte.",0,[[]]],[11,"char_to_byte","","Returns the byte index of the given char.",0,[[]]],[11,"char_to_line","","Returns the line index of the given char.",0,[[]]],[11,"char_to_utf16_cu","","Returns the utf16 code unit index of the given char.",0,[[]]],[11,"utf16_cu_to_char","","Returns the char index of the given utf16 code unit.",0,[[]]],[11,"line_to_byte","","Returns the byte index of the start of the given line.",0,[[]]],[11,"line_to_char","","Returns the char index of the start of the given line.",0,[[]]],[11,"byte","","Returns the byte at `byte_idx`.",0,[[]]],[11,"char","","Returns the char at `char_idx`.",0,[[]]],[11,"line","","Returns the line at `line_idx`.",0,[[],["ropeslice",3]]],[11,"chunk_at_byte","","Returns the chunk containing the given byte index.",0,[[]]],[11,"chunk_at_char","","Returns the chunk containing the given char index.",0,[[]]],[11,"chunk_at_line_break","","Returns the chunk containing the given line break.",0,[[]]],[11,"slice","","Gets an immutable slice of the `Rope`.",0,[[],["ropeslice",3]]],[11,"bytes","","Creates an iterator over the bytes of the `Rope`.",0,[[],["bytes",3]]],[11,"bytes_at","","Creates an iterator over the bytes of the `Rope`, starting…",0,[[],["bytes",3]]],[11,"chars","","Creates an iterator over the chars of the `Rope`.",0,[[],["chars",3]]],[11,"chars_at","","Creates an iterator over the chars of the `Rope`, starting…",0,[[],["chars",3]]],[11,"lines","","Creates an iterator over the lines of the `Rope`.",0,[[],["lines",3]]],[11,"lines_at","","Creates an iterator over the lines of the `Rope`, starting…",0,[[],["lines",3]]],[11,"chunks","","Creates an iterator over the chunks of the `Rope`.",0,[[],["chunks",3]]],[11,"chunks_at_byte","","Creates an iterator over the chunks of the `Rope`, with…",0,[[]]],[11,"chunks_at_char","","Creates an iterator over the chunks of the `Rope`, with…",0,[[]]],[11,"chunks_at_line_break","","Creates an iterator over the chunks of the `Rope`, with…",0,[[]]],[11,"new","","Creates a new RopeBuilder, ready for input.",1,[[]]],[11,"append","","Appends `chunk` to the end of the in-progress `Rope`.",1,[[]]],[11,"finish","","Finishes the build, and returns the `Rope`.",1,[[],["rope",3]]],[11,"len_bytes","","Total number of bytes in the `RopeSlice`.",2,[[]]],[11,"len_chars","","Total number of chars in the `RopeSlice`.",2,[[]]],[11,"len_lines","","Total number of lines in the `RopeSlice`.",2,[[]]],[11,"len_utf16_cu","","Total number of utf16 code units that would be in the…",2,[[]]],[11,"byte_to_char","","Returns the char index of the given byte.",2,[[]]],[11,"byte_to_line","","Returns the line index of the given byte.",2,[[]]],[11,"char_to_byte","","Returns the byte index of the given char.",2,[[]]],[11,"char_to_line","","Returns the line index of the given char.",2,[[]]],[11,"char_to_utf16_cu","","Returns the utf16 code unit index of the given char.",2,[[]]],[11,"utf16_cu_to_char","","Returns the char index of the given utf16 code unit.",2,[[]]],[11,"line_to_byte","","Returns the byte index of the start of the given line.",2,[[]]],[11,"line_to_char","","Returns the char index of the start of the given line.",2,[[]]],[11,"byte","","Returns the byte at `byte_idx`.",2,[[]]],[11,"char","","Returns the char at `char_idx`.",2,[[]]],[11,"line","","Returns the line at `line_idx`.",2,[[],["ropeslice",3]]],[11,"chunk_at_byte","","Returns the chunk containing the given byte index.",2,[[]]],[11,"chunk_at_char","","Returns the chunk containing the given char index.",2,[[]]],[11,"chunk_at_line_break","","Returns the chunk containing the given line break.",2,[[]]],[11,"as_str","","Returns the entire contents of the `RopeSlice` as a `&str`…",2,[[],["option",4]]],[11,"slice","","Returns a sub-slice of the `RopeSlice` in the given char…",2,[[]]],[11,"bytes","","Creates an iterator over the bytes of the `RopeSlice`.",2,[[],["bytes",3]]],[11,"bytes_at","","Creates an iterator over the bytes of the `RopeSlice`,…",2,[[],["bytes",3]]],[11,"chars","","Creates an iterator over the chars of the `RopeSlice`.",2,[[],["chars",3]]],[11,"chars_at","","Creates an iterator over the chars of the `RopeSlice`,…",2,[[],["chars",3]]],[11,"lines","","Creates an iterator over the lines of the `RopeSlice`.",2,[[],["lines",3]]],[11,"lines_at","","Creates an iterator over the lines of the `RopeSlice`,…",2,[[],["lines",3]]],[11,"chunks","","Creates an iterator over the chunks of the `RopeSlice`.",2,[[],["chunks",3]]],[11,"chunks_at_byte","","Creates an iterator over the chunks of the `RopeSlice`,…",2,[[]]],[11,"chunks_at_char","","Creates an iterator over the chunks of the `RopeSlice`,…",2,[[]]],[11,"chunks_at_line_break","","Creates an iterator over the chunks of the `RopeSlice`,…",2,[[]]],[0,"iter","","Iterators over a `Rope`\'s data.",null,null],[3,"Bytes","ropey::iter","An iterator over a `Rope`\'s bytes.",null,null],[3,"Chars","","An iterator over a `Rope`\'s chars.",null,null],[3,"Lines","","An iterator over a `Rope`\'s lines.",null,null],[3,"Chunks","","An iterator over a `Rope`\'s contiguous `str` chunks.",null,null],[11,"prev","","Advances the iterator backwards and returns the previous…",3,[[],["option",4]]],[11,"prev","","Advances the iterator backwards and returns the previous…",4,[[],["option",4]]],[11,"prev","","Advances the iterator backwards and returns the previous…",5,[[],[["option",4],["ropeslice",3]]]],[11,"prev","","Advances the iterator backwards and returns the previous…",6,[[],["option",4]]],[0,"str_utils","ropey","Utility functions for utf8 string slices.",null,null],[5,"byte_to_char_idx","ropey::str_utils","Converts from byte-index to char-index in a string slice.",null,[[]]],[5,"byte_to_line_idx","","Converts from byte-index to line-index in a string slice.",null,[[]]],[5,"char_to_byte_idx","","Converts from char-index to byte-index in a string slice.",null,[[]]],[5,"char_to_line_idx","","Converts from char-index to line-index in a string slice.",null,[[]]],[5,"line_to_byte_idx","","Converts from line-index to byte-index in a string slice.",null,[[]]],[5,"line_to_char_idx","","Converts from line-index to char-index in a string slice.",null,[[]]],[11,"from","ropey","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","ropey::iter","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","ropey","",0,[[]]],[11,"from","","",0,[[["cow",4]]]],[11,"from","","",0,[[["string",3]]]],[11,"from","","",0,[[["ropeslice",3]]]],[11,"from","","",2,[[]]],[11,"next","ropey::iter","Advances the iterator forward and returns the next value.",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","Advances the iterator forward and returns the next value.",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","Advances the iterator forward and returns the next value.",5,[[],[["option",4],["ropeslice",3]]]],[11,"size_hint","","",5,[[]]],[11,"next","","Advances the iterator forward and returns the next value.",6,[[],["option",4]]],[11,"clone","ropey","",0,[[],["rope",3]]],[11,"clone","","",1,[[],["ropebuilder",3]]],[11,"clone","","",2,[[],["ropeslice",3]]],[11,"clone","ropey::iter","",3,[[],["bytes",3]]],[11,"clone","","",4,[[],["chars",3]]],[11,"clone","","",5,[[],["lines",3]]],[11,"clone","","",6,[[],["chunks",3]]],[11,"default","ropey","",0,[[]]],[11,"default","","",1,[[],["ropebuilder",3]]],[11,"cmp","","",0,[[["rope",3]],["ordering",4]]],[11,"cmp","","",2,[[["ropeslice",3]],["ordering",4]]],[11,"eq","","",0,[[["rope",3]]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[]]],[11,"eq","","",0,[[["string",3]]]],[11,"eq","","",0,[[["cow",4]]]],[11,"eq","","",2,[[["ropeslice",3]]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",2,[[["string",3]]]],[11,"eq","","",2,[[["cow",4]]]],[11,"eq","","",2,[[["rope",3]]]],[11,"eq","","",0,[[["ropeslice",3]]]],[11,"partial_cmp","","",0,[[["rope",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["ropeslice",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","ropey::iter","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","ropey","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"from_iter","","",0,[[]]],[11,"from_iter","","",0,[[]]],[11,"from_iter","","",0,[[]]]],"p":[[3,"Rope"],[3,"RopeBuilder"],[3,"RopeSlice"],[3,"Bytes"],[3,"Chars"],[3,"Lines"],[3,"Chunks"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain…","i":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and…",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of…",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its…",null,null],[4,"CollectionAllocErr","","Error type for APIs with fallible heap allocation",null,null],[13,"CapacityOverflow","","Overflow `usize::MAX` or other error during size computation",0,null],[13,"AllocErr","","The allocator return an error",0,null],[12,"layout","smallvec::CollectionAllocErr","The layout that was passed to the allocator",1,null],[8,"ExtendFromSlice","smallvec","Trait to be implemented by a collection that can be…",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",2,[[]]],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array\'s elements.",3,null],[10,"size","","Returns the number of items the array can hold.",3,[[]]],[8,"ToSmallVec","","Convenience trait for constructing a `SmallVec`",null,null],[10,"to_smallvec","","Construct a new `SmallVec` from a slice.",4,[[],["smallvec",3]]],[11,"new","","Construct an empty vector",5,[[],["smallvec",3]]],[11,"with_capacity","","Construct an empty vector with enough capacity…",5,[[]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",5,[[["vec",3]],["smallvec",3]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A`…",5,[[],["smallvec",3]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A`…",5,[[],["smallvec",3]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A`…",5,[[["maybeuninit",19]],["smallvec",3]]],[11,"set_len","","Sets the length of a vector.",5,[[]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",5,[[]]],[11,"len","","The number of elements stored in the vector",5,[[]]],[11,"is_empty","","Returns `true` if the vector is empty",5,[[]]],[11,"capacity","","The number of items the vector can hold without reallocating",5,[[]]],[11,"spilled","","Returns `true` if the data has spilled into a separate…",5,[[]]],[11,"drain","","Creates a draining iterator that removes the specified…",5,[[],["drain",3]]],[11,"push","","Append an item to the vector.",5,[[]]],[11,"pop","","Remove an item from the end of the vector and return it,…",5,[[],["option",4]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap,…",5,[[]]],[11,"try_grow","","Re-allocate to set the capacity to `max(new_cap,…",5,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be…",5,[[]]],[11,"try_reserve","","Reserve capacity for `additional` more elements to be…",5,[[],[["collectionallocerr",4],["result",4]]]],[11,"reserve_exact","","Reserve the minimum capacity for `additional` more…",5,[[]]],[11,"try_reserve_exact","","Reserve the minimum capacity for `additional` more…",5,[[],[["collectionallocerr",4],["result",4]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",5,[[]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and…",5,[[]]],[11,"as_slice","","Extracts a slice containing the entire vector.",5,[[]]],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",5,[[]]],[11,"swap_remove","","Remove the element at position `index`, replacing it with…",5,[[]]],[11,"clear","","Remove all elements from the vector.",5,[[]]],[11,"remove","","Remove and return the element at position `index`,…",5,[[]]],[11,"insert","","Insert an element at position `index`, shifting all…",5,[[]]],[11,"insert_many","","Insert multiple elements at position `index`, shifting all…",5,[[["intoiterator",8]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the…",5,[[],["vec",3]]],[11,"into_boxed_slice","","Converts a `SmallVec` into a `Box<[T]>` without…",5,[[],["box",3]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise…",5,[[],["result",4]]],[11,"retain","","Retains only the elements specified by the predicate.",5,[[["fnmut",8]]]],[11,"dedup","","Removes consecutive duplicate elements.",5,[[]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given…",5,[[]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",5,[[]]],[11,"from_raw_parts","","Creates a `SmallVec` directly from the raw components of…",5,[[],["smallvec",3]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",5,[[]]],[11,"insert_from_slice","","Copy elements from a slice into the vector at position…",5,[[]]],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",5,[[]]],[11,"resize","","Resizes the vector so that its length is equal to `len`.",5,[[]]],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use…",5,[[]]],[11,"as_slice","","Returns the remaining items of this iterator as a slice.",6,[[]]],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable…",6,[[]]],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",null,null],[11,"from","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"from","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"extend_from_slice","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"from","","",0,[[["layouterr",3]]]],[11,"from","","",5,[[],["smallvec",3]]],[11,"from","","",5,[[["vec",3]],["smallvec",3]]],[11,"from","","",5,[[],["smallvec",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"eq","","",5,[[["smallvec",3]]]],[11,"cmp","","",5,[[["smallvec",3]],["ordering",4]]],[11,"partial_cmp","","",5,[[["smallvec",3]],[["option",4],["ordering",4]]]],[11,"drop","","",7,[[]]],[11,"drop","","",5,[[]]],[11,"drop","","",6,[[]]],[11,"index","","",5,[[]]],[11,"index_mut","","",5,[[]]],[11,"hash","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"next","","",7,[[],["option",4]]],[11,"size_hint","","",7,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next_back","","",7,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"extend","","",5,[[["intoiterator",8]]]],[11,"from_iter","","",5,[[["intoiterator",8]],["smallvec",3]]],[11,"into_iter","","",5,[[]]],[11,"len","","",7,[[]]],[11,"as_ref","","",5,[[]]],[11,"as_mut","","",5,[[]]],[11,"clone","","",5,[[],["smallvec",3]]],[11,"clone","","",6,[[],["intoiter",3]]],[11,"default","","",5,[[],["smallvec",3]]],[11,"borrow_mut","","",5,[[]]]],"p":[[4,"CollectionAllocErr"],[13,"AllocErr"],[8,"ExtendFromSlice"],[8,"Array"],[8,"ToSmallVec"],[3,"SmallVec"],[3,"IntoIter"],[3,"Drain"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);